<?xml version="1.0"?>
<doc>
    <assembly>
        <name>harlam357.Security</name>
    </assembly>
    <members>
        <member name="T:harlam357.Security.Cryptography.Asymmetric">
            <summary>
            Represents an object that performs asymmetric encryption.
            </summary>
            <remarks>The only provider supported is the RSACryptoServiceProvider.</remarks>
        </member>
        <member name="M:harlam357.Security.Cryptography.Asymmetric.#ctor">
            <summary>
            Initializes a new instance of the Asymmetric class using the default key size.
            </summary>
        </member>
        <member name="M:harlam357.Security.Cryptography.Asymmetric.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the Asymmetric class using the specified key size.
            </summary>
        </member>
        <member name="M:harlam357.Security.Cryptography.Asymmetric.GenerateNewKeyset">
            <summary>
            Generates a new public/private key pair as objects.
            </summary>
        </member>
        <member name="M:harlam357.Security.Cryptography.Asymmetric.GenerateNewXmlKeyset">
            <summary>
            Generates a new public/private key pair as XML strings.
            </summary>
        </member>
        <member name="M:harlam357.Security.Cryptography.Asymmetric.Encrypt(harlam357.Security.Data)">
            <summary>
            Encrypts data using the default public key.
            </summary>
            <exception cref="T:System.ArgumentNullException">data is null.</exception>
        </member>
        <member name="M:harlam357.Security.Cryptography.Asymmetric.Encrypt(harlam357.Security.Data,harlam357.Security.Cryptography.PublicKey)">
            <summary>
            Encrypts data using the provided public key.
            </summary>
            <exception cref="T:System.ArgumentNullException">data or publicKey is null.</exception>
        </member>
        <member name="M:harlam357.Security.Cryptography.Asymmetric.Encrypt(harlam357.Security.Data,System.String)">
            <summary>
            Encrypts data using the provided public key XML.
            </summary>
            <exception cref="T:System.ArgumentNullException">data or publicKeyXml is null.</exception>
        </member>
        <member name="M:harlam357.Security.Cryptography.Asymmetric.Decrypt(harlam357.Security.Data)">
            <summary>
            Decrypts data using the default private key.
            </summary>
            <exception cref="T:System.ArgumentNullException">data is null.</exception>
        </member>
        <member name="M:harlam357.Security.Cryptography.Asymmetric.Decrypt(harlam357.Security.Data,harlam357.Security.Cryptography.PrivateKey)">
            <summary>
            Decrypts data using the provided private key.
            </summary>
            <exception cref="T:System.ArgumentNullException">data or privateKey is null.</exception>
        </member>
        <member name="M:harlam357.Security.Cryptography.Asymmetric.Decrypt(harlam357.Security.Data,System.String)">
            <summary>
            Decrypts data using the provided private key XML.
            </summary>
            <exception cref="T:System.ArgumentNullException">data or privateKeyXml is null.</exception>
        </member>
        <member name="M:harlam357.Security.Cryptography.Asymmetric.GetRsaProvider">
            <summary>
            Returns the default RSA provider using the specified key size.
            </summary>
            <remarks>
            Note that Microsoft's CryptoAPI has an underlying file system dependency that is unavoidable.
            http://support.microsoft.com/default.aspx?scid=http://support.microsoft.com:80/support/kb/articles/q322/3/71.asp&amp;NoWebContent=1
            </remarks>
        </member>
        <member name="P:harlam357.Security.Cryptography.Asymmetric.KeyContainerName">
            <summary>
            Gets or sets the name of the key container used to store this key on disk. 
            </summary>
            <remarks>
            This is an unavoidable side effect of the underlying Microsoft CryptoAPI.
            http://support.microsoft.com/default.aspx?scid=http://support.microsoft.com:80/support/kb/articles/q322/3/71.asp&amp;NoWebContent=1
            </remarks>
        </member>
        <member name="P:harlam357.Security.Cryptography.Asymmetric.KeySizeBits">
            <summary>
            Gets the current key size, in bits.
            </summary>
        </member>
        <member name="P:harlam357.Security.Cryptography.Asymmetric.KeySizeMaxBits">
            <summary>
            Gets the maximum supported key size, in bits.
            </summary>
        </member>
        <member name="P:harlam357.Security.Cryptography.Asymmetric.KeySizeMinBits">
            <summary>
            Gets the minimum supported key size, in bits.
            </summary>
        </member>
        <member name="P:harlam357.Security.Cryptography.Asymmetric.KeySizeStepBits">
            <summary>
            Gets the valid key step sizes, in bits.
            </summary>
        </member>
        <member name="P:harlam357.Security.Cryptography.Asymmetric.DefaultPublicKey">
            <summary>
            Gets the default public key as stored in the *.config file.
            </summary>
        </member>
        <member name="M:harlam357.Security.Cryptography.KeyPairUtils.GetXmlElement(System.String,System.String)">
            <summary>
            Gets an element from an XML string.
            </summary>
        </member>
        <member name="M:harlam357.Security.Cryptography.KeyPairUtils.GetConfigString(System.String,System.Boolean)">
            <summary>
            Gets the specified string value from the application .config file.
            </summary>
        </member>
        <member name="T:harlam357.Security.Cryptography.PublicKey">
            <summary>
            Represents a public encryption key.
            </summary>
        </member>
        <member name="M:harlam357.Security.Cryptography.PublicKey.#ctor">
            <summary>
            Initializes a new instance of the PublicKey class.
            </summary>
        </member>
        <member name="M:harlam357.Security.Cryptography.PublicKey.#ctor(System.String)">
            <summary>
            Initializes a new instance of the PublicKey class.
            </summary>
        </member>
        <member name="M:harlam357.Security.Cryptography.PublicKey.LoadFromConfig">
            <summary>
            Loads the public key from the *.config file.
            </summary>
        </member>
        <member name="M:harlam357.Security.Cryptography.PublicKey.ToConfigSection">
            <summary>
            Returns the *.config file XML section representing this public key.
            </summary>
        </member>
        <member name="M:harlam357.Security.Cryptography.PublicKey.ExportToConfigFile(System.String)">
            <summary>
            Writes the *.config file representation of this public key to a file.
            </summary>
        </member>
        <member name="M:harlam357.Security.Cryptography.PublicKey.LoadFromXml(System.String)">
            <summary>
            Loads the public key from an XML string.
            </summary>
        </member>
        <member name="M:harlam357.Security.Cryptography.PublicKey.ToParameters">
            <summary>
            Converts this public key to an RSAParameters object.
            </summary>
        </member>
        <member name="M:harlam357.Security.Cryptography.PublicKey.ToXml">
            <summary>
            Converts this public key to its XML string representation.
            </summary>
        </member>
        <member name="M:harlam357.Security.Cryptography.PublicKey.ExportToXmlFile(System.String)">
            <summary>
            Writes the XML representation of this public key to a file.
            </summary>
        </member>
        <member name="P:harlam357.Security.Cryptography.PublicKey.Modulus">
            <summary>
            
            </summary>
        </member>
        <member name="P:harlam357.Security.Cryptography.PublicKey.Exponent">
            <summary>
            
            </summary>
        </member>
        <member name="T:harlam357.Security.Cryptography.PrivateKey">
            <summary>
            Represents a private encryption key.
            </summary>
        </member>
        <member name="M:harlam357.Security.Cryptography.PrivateKey.#ctor">
            <summary>
            Initializes a new instance of the PrivateKey class.
            </summary>
        </member>
        <member name="M:harlam357.Security.Cryptography.PrivateKey.#ctor(System.String)">
            <summary>
            Initializes a new instance of the PrivateKey class.
            </summary>
        </member>
        <member name="M:harlam357.Security.Cryptography.PrivateKey.LoadFromConfig">
            <summary>
            Loads the private key from the *.config file.
            </summary>
        </member>
        <member name="M:harlam357.Security.Cryptography.PrivateKey.ToConfigSection">
            <summary>
            Returns the *.config file XML section representing this private key.
            </summary>
        </member>
        <member name="M:harlam357.Security.Cryptography.PrivateKey.ExportToConfigFile(System.String)">
            <summary>
            Writes the *.config file representation of this private key to a file.
            </summary>
        </member>
        <member name="M:harlam357.Security.Cryptography.PrivateKey.LoadFromXml(System.String)">
            <summary>
            Loads the private key from an XML string.
            </summary>
        </member>
        <member name="M:harlam357.Security.Cryptography.PrivateKey.ToParameters">
            <summary>
            Converts this private key to an RSAParameters object.
            </summary>
        </member>
        <member name="M:harlam357.Security.Cryptography.PrivateKey.ToXml">
            <summary>
            Converts this private key to its XML string representation.
            </summary>
        </member>
        <member name="M:harlam357.Security.Cryptography.PrivateKey.ExportToXmlFile(System.String)">
            <summary>
            Writes the XML representation of this private key to a file.
            </summary>
        </member>
        <member name="P:harlam357.Security.Cryptography.PrivateKey.Modulus">
            <summary>
            
            </summary>
        </member>
        <member name="P:harlam357.Security.Cryptography.PrivateKey.Exponent">
            <summary>
            
            </summary>
        </member>
        <member name="P:harlam357.Security.Cryptography.PrivateKey.PrimeP">
            <summary>
            
            </summary>
        </member>
        <member name="P:harlam357.Security.Cryptography.PrivateKey.PrimeQ">
            <summary>
            
            </summary>
        </member>
        <member name="P:harlam357.Security.Cryptography.PrivateKey.PrimeExponentP">
            <summary>
            
            </summary>
        </member>
        <member name="P:harlam357.Security.Cryptography.PrivateKey.PrimeExponentQ">
            <summary>
            
            </summary>
        </member>
        <member name="P:harlam357.Security.Cryptography.PrivateKey.Coefficient">
            <summary>
            
            </summary>
        </member>
        <member name="P:harlam357.Security.Cryptography.PrivateKey.PrivateExponent">
            <summary>
            
            </summary>
        </member>
        <member name="T:harlam357.Security.Cryptography.SymmetricProvider">
            <summary>
            Specifies the symmetric encryption algorithm.
            </summary>
        </member>
        <member name="F:harlam357.Security.Cryptography.SymmetricProvider.DES">
            <summary>
            The Data Encryption Standard provider supports a 64 bit key only.
            </summary>
        </member>
        <member name="F:harlam357.Security.Cryptography.SymmetricProvider.RC2">
            <summary>
            The Rivest Cipher 2 provider supports keys ranging from 40 to 128 bits, default is 128 bits.
            </summary>
        </member>
        <member name="F:harlam357.Security.Cryptography.SymmetricProvider.Rijndael">
            <summary>
            The Rijndael (also known as AES) provider supports keys of 128, 192, or 256 bits with a default of 256 bits.
            </summary>
        </member>
        <member name="F:harlam357.Security.Cryptography.SymmetricProvider.TripleDES">
            <summary>
            The TripleDES provider (also known as 3DES) supports keys of 128 or 192 bits with a default of 192 bits.
            </summary>
        </member>
        <member name="T:harlam357.Security.Cryptography.Symmetric">
            <summary>
            Represents an object that performs symmetric encryption.
            </summary>
            <remarks>Symmetric encryption uses a single key to encrypt and decrypt. Both parties (encryptor and decryptor) must share the same secret key.</remarks>
        </member>
        <member name="M:harlam357.Security.Cryptography.Symmetric.#ctor(harlam357.Security.Cryptography.SymmetricProvider)">
            <summary>
            Initializes a new instance of the Symmetric class using the specified provider.
            </summary>
        </member>
        <member name="M:harlam357.Security.Cryptography.Symmetric.#ctor(harlam357.Security.Cryptography.SymmetricProvider,System.Boolean)">
            <summary>
            Initializes a new instance of the Symmetric class using the specified provider.
            </summary>
        </member>
        <member name="M:harlam357.Security.Cryptography.Symmetric.RandomInitializationVector">
            <summary>
            Generates a random initialization vector.
            </summary>
        </member>
        <member name="M:harlam357.Security.Cryptography.Symmetric.RandomKey">
            <summary>
            Generates a random key.
            </summary>
        </member>
        <member name="M:harlam357.Security.Cryptography.Symmetric.ValidateKeyAndIv(System.Boolean)">
            <summary>
            Ensures that the _crypto object has valid Key and IV prior to any attempt to encrypt or decrypt.
            </summary>
        </member>
        <member name="M:harlam357.Security.Cryptography.Symmetric.Encrypt(harlam357.Security.Data,harlam357.Security.Data)">
            <summary>
            Encrypts the specified data using the provided key.
            </summary>
            <exception cref="T:System.ArgumentNullException">data is null.</exception>
        </member>
        <member name="M:harlam357.Security.Cryptography.Symmetric.Encrypt(harlam357.Security.Data)">
            <summary>
            Encrypts the specified data using the preset key and initialization vector.
            </summary>
            <exception cref="T:System.ArgumentNullException">data is null.</exception>
        </member>
        <member name="M:harlam357.Security.Cryptography.Symmetric.Encrypt(System.IO.Stream,harlam357.Security.Data,harlam357.Security.Data)">
            <summary>
            Encrypts the specified stream to memory using the provided key and initialization vector.
            </summary>
            <exception cref="T:System.ArgumentNullException">stream is null.</exception>
        </member>
        <member name="M:harlam357.Security.Cryptography.Symmetric.Encrypt(System.IO.Stream,harlam357.Security.Data)">
            <summary>
            Encrypts the specified stream to memory using the provided key.
            </summary>
            <exception cref="T:System.ArgumentNullException">stream is null.</exception>
        </member>
        <member name="M:harlam357.Security.Cryptography.Symmetric.Encrypt(System.IO.Stream)">
            <summary>
            Encrypts the specified stream to memory using the preset key and initialization vector.
            </summary>
            <exception cref="T:System.ArgumentNullException">stream is null.</exception>
        </member>
        <member name="M:harlam357.Security.Cryptography.Symmetric.Decrypt(System.IO.Stream,harlam357.Security.Data)">
            <summary>
            Decrypts the specified stream using the provided key and preset initialization vector.
            </summary>
            <exception cref="T:System.ArgumentNullException">stream is null.</exception>
        </member>
        <member name="M:harlam357.Security.Cryptography.Symmetric.Decrypt(System.IO.Stream)">
            <summary>
            Decrypts the specified stream using the preset key and initialization vector.
            </summary>
            <exception cref="T:System.ArgumentNullException">stream is null.</exception>
        </member>
        <member name="M:harlam357.Security.Cryptography.Symmetric.Decrypt(harlam357.Security.Data,harlam357.Security.Data)">
            <summary>
            Decrypts the specified data using provided key and preset initialization vector.
            </summary>
            <exception cref="T:System.ArgumentNullException">data is null.</exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">Unable to decrypt data.</exception>
        </member>
        <member name="M:harlam357.Security.Cryptography.Symmetric.Decrypt(harlam357.Security.Data)">
            <summary>
            Decrypts the specified data using preset key and initialization vector.
            </summary>
            <exception cref="T:System.ArgumentNullException">data is null.</exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">Unable to decrypt data.</exception>
        </member>
        <member name="M:harlam357.Security.Cryptography.Symmetric.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:harlam357.Security.Cryptography.Symmetric.Dispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:harlam357.Security.Cryptography.Symmetric.Key">
            <summary>
            Gets or sets the key used to encrypt or decrypt data.
            </summary>
            <remarks>Setting a null value will be ignored.</remarks>
        </member>
        <member name="P:harlam357.Security.Cryptography.Symmetric.IntializationVector">
            <summary>
            Gets or sets the initialization vector.
            </summary>
            <remarks>Setting a null value will be ignored.</remarks>
        </member>
        <member name="T:harlam357.Security.Data">
            <summary>
            Represents Hex, Byte, Base64, or String data to encrypt or decrypt.
             </summary>
            <remarks>
            Use the Text property to get/set a string representation.
            Use the Hex property to get/set a string-based Hexadecimal representation.
            Use the Base64 to get/set a string-based Base64 representation.
            </remarks>
        </member>
        <member name="M:harlam357.Security.Data.#ctor">
            <summary>
            Initializes a new instance of the Data class that is empty.
            </summary>
        </member>
        <member name="M:harlam357.Security.Data.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the Data class with the byte array value.
            </summary>
        </member>
        <member name="M:harlam357.Security.Data.#ctor(System.String)">
            <summary>
            Initializes a new instance of the Data class with the string value.
            </summary>
        </member>
        <member name="M:harlam357.Security.Data.#ctor(System.String,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the Data class with the string value.
            </summary>
        </member>
        <member name="M:harlam357.Security.Data.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:harlam357.Security.Data.DefaultEncoding">
            <summary>
            Gets the default text encoding for all Data instances.
            </summary>
        </member>
        <member name="P:harlam357.Security.Data.Encoding">
            <summary>
            Gets or sets the text encoding for this Data instance.
            </summary>
        </member>
        <member name="P:harlam357.Security.Data.IsEmpty">
            <summary>
            Indicates if no data is present in this instance.
            </summary>
        </member>
        <member name="P:harlam357.Security.Data.StepBytes">
            <summary>
            Gets or sets the allowed step interval, in bytes, for this data; if 0, no limit.
            </summary>
        </member>
        <member name="P:harlam357.Security.Data.MinBytes">
            <summary>
            Gets or sets the minimum number of bytes allowed for this data; if 0, no limit.
            </summary>
        </member>
        <member name="P:harlam357.Security.Data.MaxBytes">
            <summary>
            Gets or sets the maximum number of bytes allowed for this data; if 0, no limit.
            </summary>
        </member>
        <member name="P:harlam357.Security.Data.MaxBits">
            <summary>
            Gets or sets the maximum number of bits allowed for this data; if 0, no limit.
            </summary>
        </member>
        <member name="P:harlam357.Security.Data.Bytes">
            <summary>
            Gets or sets the byte representation of the data. This will be padded to MinBytes and trimmed to MaxBytes as necessary.
            </summary>
        </member>
        <member name="P:harlam357.Security.Data.Text">
            <summary>
            Gets or sets the text representation of the data using the Encoding value.
            </summary>
        </member>
        <member name="P:harlam357.Security.Data.Hex">
            <summary>
            Gets or sets the Hex string representation of this data.
            </summary>
        </member>
        <member name="P:harlam357.Security.Data.Base64">
            <summary>
            Gets or sets the Base64 string representation of this data.
            </summary>
        </member>
        <member name="T:harlam357.Security.Extensions">
            <summary>
            Contains extension methods for hexidecimal and base64 conversions.
            </summary>
        </member>
        <member name="M:harlam357.Security.Extensions.ToHex(System.Byte[])">
            <summary>
            Converts an array of bytes to a Hex string representation.
            </summary>
        </member>
        <member name="M:harlam357.Security.Extensions.FromHex(System.String)">
            <summary>
            Converts a Hex string representation to an array of bytes.
            </summary>
            <exception cref="T:System.FormatException">The length of value is not zero or a multiple of 2. -or- The format of value is invalid. value contains a non-hex character.</exception>
        </member>
        <member name="M:harlam357.Security.Extensions.ToBase64(System.Byte[])">
            <summary>
            Converts an array of bytes to a Base64 string representation.
            </summary>
        </member>
        <member name="M:harlam357.Security.Extensions.FromBase64(System.String)">
            <summary>
            Converts a Base64 string representation to an array of bytes.
            </summary>
            <exception cref="T:System.FormatException">The length of value, ignoring white-space characters, is not zero or a multiple of 4. -or- The format of value is invalid. value contains a non-base-64 character, more than two padding characters, or a non-white space-character among the padding characters.</exception>
        </member>
        <member name="T:harlam357.Security.HashProvider">
            <summary>
            Specifies the type of hash.
            </summary>
        </member>
        <member name="F:harlam357.Security.HashProvider.CRC32">
            <summary>
            Cyclic Redundancy Check provider, 32-bit.
            </summary>
        </member>
        <member name="F:harlam357.Security.HashProvider.SHA1">
            <summary>
            Secure Hashing Algorithm provider, SHA-1 variant, 160-bit.
            </summary>
        </member>
        <member name="F:harlam357.Security.HashProvider.SHA256">
            <summary>
            Secure Hashing Algorithm provider, SHA-2 variant, 256-bit.
            </summary>
        </member>
        <member name="F:harlam357.Security.HashProvider.SHA384">
            <summary>
            Secure Hashing Algorithm provider, SHA-2 variant, 384-bit.
            </summary>
        </member>
        <member name="F:harlam357.Security.HashProvider.SHA512">
            <summary>
            Secure Hashing Algorithm provider, SHA-2 variant, 512-bit.
            </summary>
        </member>
        <member name="F:harlam357.Security.HashProvider.MD5">
            <summary>
            Message Digest algorithm 5, 128-bit.
            </summary>
        </member>
        <member name="T:harlam357.Security.Hash">
            <summary>
            Represents an object that performs hashing.
            </summary>
        </member>
        <member name="M:harlam357.Security.Hash.#ctor(harlam357.Security.HashProvider)">
            <summary>
            Initializes a new instance of the Hash class with the specified hash provider.
            </summary>
        </member>
        <member name="M:harlam357.Security.Hash.Calculate(System.IO.Stream)">
            <summary>
            Calculates the hash on a stream of arbitrary length.
            </summary>
        </member>
        <member name="M:harlam357.Security.Hash.Calculate(harlam357.Security.Data)">
            <summary>
            Calculates the hash for fixed length data.
            </summary>
            <exception cref="T:System.ArgumentNullException">data is null.</exception>
        </member>
        <member name="M:harlam357.Security.Hash.Calculate(harlam357.Security.Data,harlam357.Security.Data)">
            <summary>
            Calculates the hash for fixed length data with a prefixed salt value.
             </summary>
            <exception cref="T:System.ArgumentNullException">data or salt is null.</exception>
            <remarks>A "salt" value is random data prefixed to every hashed value to prevent common dictionary attacks.</remarks>
        </member>
        <member name="M:harlam357.Security.Hash.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:harlam357.Security.Hash.Dispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:harlam357.Security.Hash.Value">
            <summary>
            Gets the previously calculated hash value.
            </summary>
        </member>
    </members>
</doc>
